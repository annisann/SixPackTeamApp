# -*- coding: utf-8 -*-
"""classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nLypOrlZlOzCLS6bYhdWs9XGVTdYd9Cd
"""

import numpy as np
import pandas as pd

import tensorflow as tf
import tensorflow_hub as hub

"""**Load Dataset**"""

# Load Dataset
df_train = pd.read_csv('/content/train.csv')
df_test = pd.read_csv('/content/test.csv')

# Separate dataset into data and label
train_data = df_train.loc[:,'report'].values
train_label = df_train.loc[:,'label'].values
test_data = df_test.loc[:,'report'].values
test_label = df_test.loc[:,'label'].values

# Change label to categorical
train_label = tf.keras.utils.to_categorical(train_label,5)
test_label = tf.keras.utils.to_categorical(test_label,5)

"""**Load pretrained word embbedings**"""

# load pretrained word embeddings
model = "https://tfhub.dev/google/nnlm-id-dim128/2"
hub_layer = hub.KerasLayer(model, input_shape=[], dtype=tf.string, trainable=True)

"""**Sequence Model**"""

model = tf.keras.Sequential()
model.add(hub_layer)
model.add(tf.keras.layers.Dense(32, activation='relu'))
model.add(tf.keras.layers.Dense(5, activation='softmax'))
model.compile(optimizer='rmsprop',
              loss='categorical_crossentropy', metrics=['accuracy']
              )
model.summary()

"""**Training**"""

num_epochs = 10
history = model.fit(train_data, train_label, epochs=num_epochs, validation_data=(test_data, test_label), verbose = 1)

"""**Save Model**"""

tf.saved_model.save(model, 'classification_model') #saving model

!zip -r /content/classification_model.zip /content/classification_model

from google.colab import files
files.download("/content/classification_model.zip") # download file from google colab

"""**Converting to tflite**"""

converter = tf.lite.TFLiteConverter.from_saved_model('classification_model')
converter.target_spec.supported_ops = [
  tf.lite.OpsSet.TFLITE_BUILTINS, # enable TensorFlow Lite ops.
  tf.lite.OpsSet.SELECT_TF_OPS # enable TensorFlow ops.
]

tflite_model = converter.convert()

with open('model.tflite', 'wb') as f:
  f.write(tflite_model)